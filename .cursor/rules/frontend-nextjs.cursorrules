{
  "name": "Frontend Next.js Rules",
  "description": "Rules for writing Next.js 15 + React 19 frontend code with Tailwind and Vercel AI",
  "rules": [
        "Do not create or reference a src/ folder. This project does not use src/.",
    "The root app/ folder is the main source folder.",
    "Inside app/, the following subfolders exist and must always be used:",
    "- (pages) → Next.js App Router pages.",
    "- _api → API client functions and API-related utilities.",
    "- _components → shared and UI components.",
    "- _constants → constant values such as enums, config values, tokens.",
    "- _hooks → custom React hooks.",
    "- _layouts → layout wrappers for pages or sections.",
    "- _providers → React context providers and global wrappers.",
    "- _stores → state management (Zustand, Redux, etc).",
    "- _styles → global styles or Tailwind config extensions.",
    "- _types → TypeScript types and interfaces.",
    "- _validations → validation schemas (e.g. Zod, Yup).",
    "When generating new files, always place them in the correct subfolder instead of creating new ones.",
    "When updating or searching for existing files, always look inside app/ and its subfolders.",
    "Use functional React components only; class components are forbidden.",
    "Use Next.js App Router (app/) instead of pages/ router.",
    "Server Components by default; Client Components only when interactivity is required.",
    "All components must use TypeScript props/interfaces.",
    "Whenever creating a new component in app/_components/, always create a dedicated folder named after the component in kebab-case (e.g., ShopCard → shop-card).",
"Inside that folder, always create two files:",
"- <component-name>.tsx (e.g., shop-card.tsx) → contains the component implementation.",
"- index.ts → re-exports the component from <component-name>.tsx.",
"Always use PascalCase for the component name inside the .tsx file, but kebab-case for the folder and file name.",
"Example: `ShopCard` → folder: app/_components/shop-card/, files: shop-card.tsx + index.ts.",
"Never place loose .tsx component files directly in app/_components/. Always use the folder structure above.",
    "Use Tailwind CSS exclusively for styling; no inline styles, CSS modules, or SCSS.",
    "Use next/image for images and next/link for navigation.",
    "Keep components <300 lines; split complex components into smaller hooks or child components.",
    "Use Vercel AI SDK following official guidance for AI integration.",
    "Whenever you create a new React component in _components/, you must also generate a matching Jest test file in the same folder.",
    "Test file naming convention: ComponentName.test.tsx (for React components).",
    "For hooks inside _hooks/, always generate a test file HookName.test.ts.",
    "For stores inside _stores/, always generate a test file StoreName.test.ts.",
    "For utils inside _utils/, always generate a test file utilName.test.ts.",
    "Tests must use Jest + React Testing Library, and follow AAA pattern (Arrange, Act, Assert).",
    "Always include minimal aapshot + functional tests by default.",
     "For new projects, always initialize and use pnpm as the package manager.",
    "For existing projects, always use the package manager that the project already uses.",
    "Detect the correct package manager based on the lock file:",
    "- If pnpm-lock.yaml exists → use pnpm.",
    "- If package-lock.json exists → use npm.",
    "- If yarn.lock exists → use yarn.",
    "Never suggest switching package managers unless explicitly asked.",
    "Never generate commands with a package manager different from the one in use.",
     "Never create a src/ folder, always use app/.",
    "Always place files in the correct subfolder: _api for API calls, _validations for validation schemas, _utils for pure helpers, _constants for static values, _stores for state management, _components for UI.",
    "All API calls must be inside _api and imported into hooks or components.",
    "All stores must use Zustand (never Redux, Jotai, or Context unless explicitly requested).",
    "Whenever generating a new component/hook/util/store, also generate a matching Jest test file with at least one working test (AAA pattern).",
    "Tests must never be empty placeholders.",
    "Always detect package manager from lockfile. Default to pnpm for new projects.",
    "In READMEs and docs, commands must always use the correct package manager.",
    "Prefer reusing Tailwind classes and global styles from _styles before writing inline styles.",
    "Never install new dependencies unless explicitly requested. Prefer existing libraries already in package.json."
  ]
}
